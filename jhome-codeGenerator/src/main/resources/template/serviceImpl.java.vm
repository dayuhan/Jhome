package ${package.ServiceImpl};

import ${package.Entity}.${entity};
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
import ${superServiceImplClassPackage};
import org.springframework.stereotype.Service;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.Arrays;
import java.util.UUID;
import java.util.List;
import com.baomidou.mybatisplus.core.metadata.IPage;

import com.Util.common.*;
import com.bracket.common.Bus.ResponseJson;
import com.bracket.common.ToolKit.StringUtil;
import com.bracket.common.ToolKit.ObjectBaseUtils
import com.bracket.common.Bus.AbstractModel.PageUtils;
import com.bracket.common.Bus.Status;


/**
 //
 //                       .::::.
 //                     .::::::::.
 //                    :::::::::::
 //                 ..:::::::::::'
 //              '::::::::::::'
 //                .::::::::::
 //           '::::::::::::::..
 //                ..::::::::::::.
 //              ``::::::::::::::::
 //               ::::``:::::::::'        .:::.
 //              ::::'   ':::::'       .::::::::.
 //            .::::'      ::::     .:::::::'::::.
 //           .:::'       :::::  .:::::::::' ':::::.
 //          .::'        :::::.:::::::::'      ':::::.
 //         .::'         ::::::::::::::'         ``::::.
 //     ...:::           ::::::::::::'              ``::.
 //    ```` ':.          ':::::::::'                  ::::..
 //                       '.:::::'                    ':'````..
 * @description: $!{table.comment} 服务实现类
 * @author:  ${author}
 * @create: ${date}
 **/
@Service
#if(${kotlin})
open class ${table.serviceImplName} : ${superServiceImplClass}<${table.mapperName}, ${entity}>(), ${table.serviceName} {
        }
#else
public class ${table.serviceImplName} extends ${superServiceImplClass}<${table.mapperName}, ${entity}>implements ${table.serviceName} {

    @Autowired
    protected ${table.mapperName} mapper;

    @Override
    public void add${entity}(${entity}Query obj){
        ${entity} targetObj= BaseUtil.copyProperties(obj,${entity}.class);
        targetObj.setId(UUID.randomUUID().toString());
        int count = mapper.insert(targetObj);
        if (count <= 0)
            #set ($ModuleName=$package.ModuleName.substring(0,1).toUpperCase() + $package.ModuleName.substring(1,$package.ModuleName.length()))
            throw new ${ModuleName}Exception}("新增失败");
    }

    @Override
    public void edit${entity}(${entity}Query obj){
        ${entity} targetObj= BaseUtil.copyProperties(obj,${entity}.class);
        int count = mapper.updateById(targetObj);
        if (count <= 0)
             #set ($ModuleName=$package.ModuleName.substring(0,1).toUpperCase() + $package.ModuleName.substring(1,$package.ModuleName.length()))
             throw new ${ModuleName}Exception("编辑失败");
    }

    @Override
    public void batchDelete${entity}(String[] ids) {
        int count = mapper.deleteBatchIds(Arrays.asList(ids));
        if (count <= 0)
             #set ($ModuleName=$package.ModuleName.substring(0,1).toUpperCase() + $package.ModuleName.substring(1,$package.ModuleName.length()))
             throw new ${ModuleName}Exception("批量删除失败");
    }

    @Override
    public void delete${entity}(${entity}Query obj) {
        ${entity} targetObj= BaseUtil.copyProperties(obj,${entity}.class);
        int count = mapper.deleteById(targetObj);
        if (count <= 0)
             #set ($ModuleName=$package.ModuleName.substring(0,1).toUpperCase() + $package.ModuleName.substring(1,$package.ModuleName.length()))
             throw new ${ModuleName}Exception("删除失败");
    }

    @Override
    public  PageUtils<List<${entity}>> select${entity}PageList(${entity}Query queryObject)  {
        IPage<${entity}> page = new Page<>(queryObject.getPageNum(), queryObject.getPageSize());
        IPage<${entity}> result = mapper.select${entity}PageList(page, queryObject);
        PageUtils<List<${entity}>> pageUtils = new PageUtils<List<${entity}>>(
        result.getRecords(),
        result.getTotal(),
        queryObject.getPageSize());
        return pageUtils;
    }


    /**
     * 根据Id获取 单个对象
     *
     * @param id
     * @return
     */
    @Override
    public ${entity} select${entity}ById(String id) {
        return mapper.selectById(id);
    }

    /**
     * 根据Ids获取多个对象
     *
     * @param
     */
    @Override
    public List<${entity}> selectBatch${entity}ByIds(List<String> idList) {
        return mapper.selectBatchIds(idList);
    }

    /**
     * 获取一个目标对象
     *
     * @param queryObject
     * @return
     */
    @Override
    public ${entity} select${entity}One(QueryWrapper<${entity}> queryObject) {
        return mapper.selectOne(queryObject);
    }

    /**
     * 根据条件 获取多个目标对象
     *
     * @param queryObject
     * @return
     */
    @Override
    public List<${entity}> select${entity}List(QueryWrapper<${entity}> queryObject){
        return mapper.selectList(queryObject);
    }
}
#end