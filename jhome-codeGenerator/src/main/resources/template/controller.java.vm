package ${package.Controller};



import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.validation.annotation.*;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import java.util.List;
import java.util.Arrays;
import ${package.Service}.*;
import ${package.Entity}.*;
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import com.bracket.common.Bus.AbstractController.BaseController;
import com.bracket.common.Bus.ResponseJson;
import com.bracket.common.ToolKit.StringUtil;
import com.bracket.common.ToolKit.ObjectBaseUtils
import com.bracket.common.Bus.AbstractModel.PageUtils;
import com.bracket.common.Bus.Status;




/**
 //
 //                       .::::.
 //                     .::::::::.
 //                    :::::::::::
 //                 ..:::::::::::'
 //              '::::::::::::'
 //                .::::::::::
 //           '::::::::::::::..
 //                ..::::::::::::.
 //              ``::::::::::::::::
 //               ::::``:::::::::'        .:::.
 //              ::::'   ':::::'       .::::::::.
 //            .::::'      ::::     .:::::::'::::.
 //           .:::'       :::::  .:::::::::' ':::::.
 //          .::'        :::::.:::::::::'      ':::::.
 //         .::'         ::::::::::::::'         ``::::.
 //     ...:::           ::::::::::::'              ``::.
 //    ```` ':.          ':::::::::'                  ::::..
 //                       '.:::::'                    ':'````..
 * @description: $!{table.comment} 控制器
 * @author:  ${author}
 * @create: ${date}
 **/
@Api(tags = "${table.comment}")
    #if(${restControllerStyle})
    @RestController
    #else
    @Controller
    #end
    ##@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
    #if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
    #else
public class ${table.controllerName}  extends BaseController {
    @Autowired
    protected  ${table.serviceName} do${entity}Service;

    @ResponseBody
    @ApiOperation(value = "添加$!{table.comment}[代码生成器生成]", notes = "注意：jhomeToken默认由前端放到header中,调试模式不提供改参数，从cookies中获取")
    @PostMapping(value = "/add${entity}", produces = "application/json;charset=UTF-8")
    public ResponseJson add${entity}(
    @Validated @RequestBody  ${entity}Query  obj,
            BindingResult result) {
        do${entity}Service.add${entity}(obj);
        return new ResponseJson().success();
    }

    @ResponseBody
    @ApiOperation(value = "编辑$!{table.comment} [代码生成器生成]", notes = "注意：jhomeToken默认由前端放到header中,调试模式不提供改参数，从cookies中获取")
    @PostMapping(value = "/edit${entity}", produces = "application/json;charset=UTF-8")
    public ResponseJson edit${entity}(
    @Validated @RequestBody ${entity}Query obj,
            BindingResult result) {
        do${entity}Service.edit${entity}(obj);
        return new ResponseJson().success();
    }

    @ResponseBody
    @ApiOperation(value = "删除$!{table.comment} [代码生成器生成]", notes = "注意：jhomeToken默认由前端放到header中,调试模式不提供改参数，从cookies中获取")
    @PostMapping(value = "/delete${entity}", produces = "application/json;charset=UTF-8")
    public ResponseJson delete${entity}(
    @Validated @RequestBody ${entity}Query obj,
            BindingResult result) {
        do${entity}Service.delete${entity}(obj);
        return new ResponseJson().success();
    }
    @ApiOperation(value = "批量删除$!{table.comment} [代码生成器生成]", notes = "注意：jhomeToken默认由前端放到header中,调试模式不提供改参数，从cookies中获取")
    @PostMapping(value = "/batchDelete${entity}", produces = "application/json;charset=UTF-8")
    public ResponseJson batchDelete${entity}(@RequestParam("ids") String ids) {
        if(StringUtil.isBlank(ids))
            return new ResponseJson().error("批量删除 Ids不能为空！");
        String[] idsArrays=  ids.split(",");
        do${entity}Service.batchDelete${entity}(idsArrays);
        return new ResponseJson().success();
    }

    @ResponseBody
    @ApiOperation(value = "获取$!{table.comment}列表[分页][代码生成器生成]", notes = "注意：jhomeToken默认由前端放到header中,调试模式不提供改参数，从cookies中获取")
    @PostMapping(value = "/select${entity}PageList", produces = "application/json;charset=UTF-8")
    public ResponseJson select${entity}PageList(@Validated @RequestBody ${entity}Query query, BindingResult result) {
        return new ResponseJson().success().setValue("data", do${entity}Service.select${entity}PageList(query));
    }

    @ResponseBody
    @ApiOperation(value = "根据Id获取 单个对象 [代码生成器生成]", notes = "注意：jhomeToken默认由前端放到header中,调试模式不提供改参数，从cookies中获取")
    @PostMapping(value = "/select${entity}ById", produces = "application/json;charset=UTF-8")
    public ResponseJson select${entity}ById(String id) {
        return new ResponseJson().success().setValue("data", do${entity}Service.select${entity}ById(id));
    }

    @ResponseBody
    @ApiOperation(value = "根据Ids获取多个${entity}对象[代码生成器生成]", notes = "注意：jhomeToken默认由前端放到header中,调试模式不提供改参数，从cookies中获取")
    @PostMapping(value = "/selectBatch${entity}ByIds", produces = "application/json;charset=UTF-8")
    public ResponseJson selectBatch${entity}ByIds(String ids)   {
        List<String>idList= Arrays.asList(ids.split(","));
        return new ResponseJson().success().setValue("data", do${entity}Service.selectBatch${entity}ByIds(idList));
    }

    @ResponseBody
    @ApiOperation(value = "根据条件获取${entity}对象[代码生成器生成]", notes = "注意：jhomeToken默认由前端放到header中,调试模式不提供改参数，从cookies中获取")
    @PostMapping(value = "/select${entity}One", produces = "application/json;charset=UTF-8")
    public ResponseJson select${entity}One(@Validated @RequestBody ${entity}Query query, BindingResult result){
        ${entity} targetObj = BaseUtil.copyProperties(query, ${entity}.class);
        QueryWrapper<${entity}> queryWrapper=new QueryWrapper<>(targetObj);
        return new ResponseJson().success().setValue("data", do${entity}Service.select${entity}One(queryWrapper));
    }

    @ResponseBody
    @ApiOperation(value = "根据自定义条件获取${entity}对象实体集合[代码生成器生成]", notes = "注意：jhomeToken默认由前端放到header中,调试模式不提供改参数，从cookies中获取")
    @PostMapping(value = "/select${entity}List", produces = "application/json;charset=UTF-8")
    public ResponseJson select${entity}List(@Validated @RequestBody ${entity}Query query, BindingResult result){
        ${entity} targetObj = BaseUtil.copyProperties(query, ${entity}.class);
            QueryWrapper<${entity}> queryWrapper=new QueryWrapper<>(targetObj);
            return new ResponseJson().success().setValue("data", do${entity}Service.select${entity}List(queryWrapper));
        }
    }
    #end
#end